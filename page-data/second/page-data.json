{"componentChunkName":"component---src-templates-blog-post-js","path":"/second","webpackCompilationHash":"1291536645f6e7836f52","result":{"data":{"site":{"siteMetadata":{"title":"sandbox.code","author":"Hari Karthic Mahadevan"}},"markdownRemark":{"id":"963c32d7-a7c1-5c6b-940d-1682f3ec2555","excerpt":"Gatsby and dynamic pages Setting up a simple website with Gatsby is the easiest thing ever, you just dump your pages in  and you are done.  But if you are…","html":"<h2>Gatsby and dynamic pages</h2>\n<p>Setting up a simple website with Gatsby is the easiest thing ever, you just dump your pages in <code class=\"language-text\">src/pages</code> and you are done. </p>\n<p>But if you are adventourus, ad-vent-tur-ous , is that right? you will say let me go for JSON or MD files for data and have a proper CMS.</p>\n<p>i did it, if i can do it anyone can. But there are <strong>some minor  issues while setting up Gatsby pages dynamically</strong> which prop up and it is not clearly explained where we had gone wrong.</p>\n<p>My issue was the blog sub pages not opening up properly, i.e i would get the list of items on my home (<code class=\"language-text\">\\</code>) page. But if i, say for example, go to <code class=\"language-text\">localhost:8000/first</code> if would redirect me  to a 404.</p>\n<p>This was happening despite my GraphQL query returning proper results.</p>\n<p>So lets dive in and hopefully thsi page will go into the massive knowledge bank of Gatsby initial setups and hiccups which is already present online.</p>\n<p>If you are still here and are already  feeling <em>“urgh! just show me the code already”</em> , i hear you .</p>\n<h4>Making these assumptions</h4>\n<ul>\n<li>you know React</li>\n<li>you have setup Gatsby and have seen your initial page in your local dev environment</li>\n</ul>\n<p>Go through these links first , and if is doesn’t help do come back here.</p>\n<ul>\n<li>Gatsby Home <a href=\"https://www.gatsbyjs.org/tutorial/\">tutorials</a> , reading <strong>step1 - step 7</strong> of this will set you up nicely.</li>\n<li>Deploying to [gh-pages] (<a href=\"https://www.gatsbyjs.org/docs/how-gatsby-works-with-github-pages/\">https://www.gatsbyjs.org/docs/how-gatsby-works-with-github-pages/</a>) . Github pages is an opinionated deployment solution, i am recomending it as i am using it for now. Will update if anything changes.</li>\n</ul>\n<p>…</p>\n<p>…</p>\n<p><em>Back? you really do want the code don’t you?</em></p>\n<p>Allright, assuming you have setup Gatsby and are stuck somewhere .</p>\n<p>This method is relatively straight forward. If you are using Markdown files as the source of your data, please confirm if you are using the <strong>gatsby-transformer-remark</strong> plugin. </p>\n<p>First let us look at your <code class=\"language-text\">gatsby-node.js</code> , in that file you should be having your <code class=\"language-text\">createPages</code> method , which is one of the <a href=\"https://www.gatsbyjs.org/docs/node-apis/#createPages\">gatsby node APIs</a> .</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">exports.createPages = ({ actions, graphql }) =&gt; {\n  const { createPage } = actions\n  const blogPost = path.resolve(`./src/templates/blog-post.js`)\n  return graphql(`\n  {\n    allMarkdownRemark(\n     sort: { fields: [frontmatter___date], order: DESC }\n    ) \n   {\n    edges {\n      node {\n        fields {\n          slug\n        }\n        frontmatter {\n          \n          title\n          \n        }\n      }\n    }\n  }\n}`).then(result =&gt; {\nif (result.errors) {\n  return Promise.reject(result.errors)\n}\n// get all posts\nconst posts = result.data.allMarkdownRemark.edges;\n\n// Create post detail pages\nposts.forEach((post, index) =&gt; {\n  createPage({\n    path: post.node.frontmatter.path,\n    component: blogPost,\n    context: {\n      slug: post.node.fields.slug,\n    },\n  })\n})\n})\n}</code></pre></div>\n<p>Cutting to the meat of the matter, you can see the the <code class=\"language-text\">createPage</code> method runs our graphQL query and fetches all the data. But what happens after that ? We create individual pages with <code class=\"language-text\">createPage</code>method with a specified template , mine are located at <code class=\"language-text\">src/templates/...</code> .</p>\n<p>This should set you up , just type some localhost:8000/psfsf (an error page basically) and it should show the rest of your <em>“available”</em> pages in bottom.</p>\n<p>If you still have the issue, check these.</p>\n<ul>\n<li>check your frontmatter in your md files, sometimes a simple duplication of the frontmatter data, such as unique paths, will cause annoying issues.</li>\n<li>check if you have set up your transform plugins to point to the correct folder.\n*If you are using slugs (i.e translating the file name into navigable paths) make sure you have set up custom nodeFileds properly using <code class=\"language-text\">onCreateNode</code> API.</li>\n</ul>\n<p>Now go out there and be somebody !!</p>","frontmatter":{"title":"Gatsby and Dynamic pages","date":"September 18, 2019","description":"Starter to editing and deploying","tags":["tech"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/second/","previous":{"fields":{"slug":"/first/"},"frontmatter":{"path":"/first","title":"Hello, there Mindy*","tags":["non-tech","tech"]}},"next":null}}}